name: CI/CD Todo Laravel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: root
          POSTGRES_USER: root
          POSTGRES_DB: todo
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build Docker Image
        run: |
          docker build -t todo_app:latest -f Dockerfile .

      - name: Start Containers
        run: |
          docker-compose up -d

      - name: Wait for Laravel Healthcheck
        run: |
          until docker inspect --format='{{.State.Health.Status}}' todo_app | grep -q "healthy"; do
            echo "Waiting for Laravel service to be healthy..."
            sleep 2
          done

      - name: Run Laravel Tests
        run: |
          docker-compose exec -T laravel php artisan test

      - name: Stop Containers
        run: |
          docker-compose down

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' # Only deploy on push to main

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            PROJECT_DIR="/var/www/todo_laravel"
            PAT="${{ secrets.LIARA_GITHUB_PAT }}"
            
            # Check if the directory exists and is NOT empty
            if [ -d "$PROJECT_DIR" ] && [ "$(ls -A $PROJECT_DIR)" ]; then
              echo "‚úÖ Directory exists and is not empty. Pulling latest changes..."
              cd "$PROJECT_DIR" || { echo "‚ùå Error: Failed to cd into $PROJECT_DIR"; exit 1; }
              git pull https://"$PAT"@github.com/Parsa-mrz/Todo_laravel.git main || { echo "‚ùå Error: Git pull failed"; exit 1; }
            else
              echo "üöÄ Directory does not exist or is empty. Cloning fresh..."
              rm -rf "$PROJECT_DIR"
              git clone https://"$PAT"@github.com/Parsa-mrz/Todo_laravel.git "$PROJECT_DIR" || { echo "‚ùå Error: Git clone failed"; exit 1; }
              cd "$PROJECT_DIR" || { echo "‚ùå Error: Failed to cd into $PROJECT_DIR after cloning"; exit 1; }
            fi
            
            # Change to the project directory and deploy using Docker Compose
            cd "$PROJECT_DIR"
            docker-compose down
            docker-compose build
            docker-compose up -d --force-recreate
            docker-compose exec -T laravel php artisan migrate --force
            docker image prune -f
            docker ps -a
